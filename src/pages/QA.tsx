import React, { useState, useRef, useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import {
  Input,
  Button,
  Avatar,
  Tag,
  Space,
  Spin,
  Dropdown,
  message as antMessage,
} from "antd";
import type { MenuProps } from "antd";
import {
  SendOutlined,
  LikeOutlined,
  DislikeOutlined,
  RobotOutlined,
  UserOutlined,
  MessageOutlined,
  BookOutlined,
  TeamOutlined,
  BellOutlined,
  LogoutOutlined,
} from "@ant-design/icons";
import { useAuthStore } from "@/contexts/AuthContext";

interface Message {
  type: "user" | "bot";
  content: string;
  sources?: string[];
  timestamp: Date;
  id: string;
}

const QA: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { user, logout } = useAuthStore();
  const [question, setQuestion] = useState("");
  const [messages, setMessages] = useState<Message[]>([]);
  const [isTyping, setIsTyping] = useState(false);
  const [feedbackMessageId, setFeedbackMessageId] = useState<string | null>(
    null
  );
  const [feedbackText, setFeedbackText] = useState("");
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const handleLogout = () => {
    logout();
    navigate("/login");
  };

  if (!user) {
    return null;
  }

  const currentPath = location.pathname;

  const userMenuItems: MenuProps["items"] = [
    {
      key: "profile",
      icon: <UserOutlined />,
      label: "H·ªì s∆° c√° nh√¢n",
      onClick: () => navigate("/student/profile"),
    },
    {
      type: "divider",
    },
    {
      key: "logout",
      icon: <LogoutOutlined />,
      label: "ƒêƒÉng xu·∫•t",
      danger: true,
      onClick: handleLogout,
    },
  ];

  // Suggested questions
  const suggestedQuestions = [
    "L√†m th·∫ø n√†o ƒë·ªÉ ƒëƒÉng k√Ω m√¥n h·ªçc?",
    "ƒêi·ªÅu ki·ªán x√©t h·ªçc b·ªïng l√† g√¨?",
    "L√†m sao ƒë·ªÉ tham gia c√¢u l·∫°c b·ªô?",
    "L·ªãch thi h·ªçc k·ª≥ n√†y nh∆∞ th·∫ø n√†o?",
    "N·ªôi quy sinh vi√™n FPTU c√≥ nh·ªØng g√¨?",
    "H·ªçc ph√≠ FPTU l√† bao nhi√™u?",
  ];

  // Related questions based on topic
  const getRelatedQuestions = (lastMessage: string) => {
    if (lastMessage.includes("h·ªçc b·ªïng")) {
      return [
        "H·∫°n ch√≥t n·ªôp h·ªì s∆° h·ªçc b·ªïng l√† khi n√†o?",
        "ƒêi·ªÅu ki·ªán duy tr√¨ h·ªçc b·ªïng?",
        "C√≥ nh·ªØng lo·∫°i h·ªçc b·ªïng n√†o?",
      ];
    }
    if (lastMessage.includes("ƒëƒÉng k√Ω m√¥n")) {
      return [
        "L√†m sao ƒë·ªÉ thay ƒë·ªïi l·ªãch h·ªçc?",
        "S·ªë t√≠n ch·ªâ t·ªëi ƒëa m·ªói k·ª≥ l√† bao nhi√™u?",
        "Khi n√†o c√≥ th·ªÉ r√∫t m√¥n?",
      ];
    }
    if (lastMessage.includes("CLB") || lastMessage.includes("c√¢u l·∫°c b·ªô")) {
      return [
        "C√≥ nh·ªØng CLB n√†o v·ªÅ c√¥ng ngh·ªá?",
        "L√†m sao ƒë·ªÉ th√†nh l·∫≠p CLB m·ªõi?",
        "L·ª£i √≠ch c·ªßa vi·ªác tham gia CLB?",
      ];
    }
    return [
      "D·ªãch v·ª• h·ªó tr·ª£ sinh vi√™n c√≥ nh·ªØng g√¨?",
      "C∆° s·ªü v·∫≠t ch·∫•t FPTU nh∆∞ th·∫ø n√†o?",
      "Ho·∫°t ƒë·ªông ngo·∫°i kh√≥a t·∫°i FPTU?",
    ];
  };

  // Get query from URL
  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    const queryParam = searchParams.get("q");
    if (queryParam) {
      setQuestion(queryParam);
      handleSubmitWithQuery(queryParam);
    }
  }, [location.search]);

  // Auto scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, isTyping]);

  const handleSubmitWithQuery = (query: string) => {
    if (!query.trim()) return;

    const userMessage: Message = {
      type: "user",
      content: query,
      timestamp: new Date(),
      id: Date.now().toString(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setQuestion("");
    setIsTyping(true);

    // Simulate AI response with typing delay
    setTimeout(() => {
      const botMessage: Message = {
        type: "bot",
        content: `ƒê·ªÉ ${query.toLowerCase()}, b·∫°n c·∫ßn th·ª±c hi·ªán c√°c b∆∞·ªõc sau:\n\n1. **Truy c·∫≠p FAP Portal**: ƒêƒÉng nh·∫≠p v√†o h·ªá th·ªëng FAP (fap.fpt.edu.vn) b·∫±ng t√†i kho·∫£n sinh vi√™n c·ªßa b·∫°n.\n\n2. **Ch·ªçn ch·ª©c nƒÉng t∆∞∆°ng ·ª©ng**: V√†o m·ª•c ƒëƒÉng k√Ω/qu·∫£n l√Ω m√¥n h·ªçc ho·∫∑c ho·∫°t ƒë·ªông b·∫°n mu·ªën.\n\n3. **Ki·ªÉm tra ƒëi·ªÅu ki·ªán**: ƒê·∫£m b·∫£o b·∫°n ƒë√°p ·ª©ng c√°c ƒëi·ªÅu ki·ªán c·∫ßn thi·∫øt (GPA, s·ªë t√≠n ch·ªâ, v.v.).\n\n4. **X√°c nh·∫≠n ƒëƒÉng k√Ω**: Sau khi ho√†n t·∫•t, ki·ªÉm tra email x√°c nh·∫≠n t·ª´ nh√† tr∆∞·ªùng.\n\nN·∫øu b·∫°n g·∫∑p kh√≥ khƒÉn, vui l√≤ng li√™n h·ªá ph√≤ng ƒê√†o t·∫°o qua email: daotao@fpt.edu.vn ho·∫∑c hotline: (024) 7300 5588.`,
        sources: [
          "S·ªï tay Sinh vi√™n FPTU 2024",
          "Quy ch·∫ø ƒê√†o t·∫°o ƒê·∫°i h·ªçc",
          "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng FAP Portal",
        ],
        timestamp: new Date(),
        id: (Date.now() + 1).toString(),
      };
      setMessages((prev) => [...prev, botMessage]);
      setIsTyping(false);
    }, 2000);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    handleSubmitWithQuery(question);
  };

  const handleSuggestedQuestion = (q: string) => {
    setQuestion(q);
    handleSubmitWithQuery(q);
  };

  const handleFeedback = (messageId: string, isPositive: boolean) => {
    if (isPositive) {
      // TODO: Send positive feedback to API
      alert("C·∫£m ∆°n ph·∫£n h·ªìi c·ªßa b·∫°n! üëç");
    } else {
      setFeedbackMessageId(messageId);
    }
  };

  const handleSubmitFeedback = () => {
    // TODO: Send negative feedback to API
    alert(
      `C·∫£m ∆°n ph·∫£n h·ªìi c·ªßa b·∫°n! Ch√∫ng t√¥i s·∫Ω c·∫£i thi·ªán. N·ªôi dung: ${feedbackText}`
    );
    setFeedbackMessageId(null);
    setFeedbackText("");
  };

  return (
    <div className="h-screen bg-gray-50 flex flex-col overflow-hidden">
      {/* Header - Ri√™ng cho Chat */}
      <header className="bg-white border-b border-gray-200 shadow-sm flex-shrink-0">
        <div className="max-w-screen-2xl mx-auto px-6">
          <div className="flex items-center justify-between h-16">
            {/* Logo */}
            <button
              onClick={() => navigate("/student")}
              className="flex items-center hover:opacity-80 transition"
            >
              <img
                src="/images/Logo_FPT_Education.png"
                alt="FPT Education"
                className="h-10 w-auto"
              />
            </button>

            {/* Navigation + User - B√äN PH·∫¢I */}
            <div className="flex items-center gap-1">
              <button
                onClick={() => navigate("/qa")}
                className="flex items-center gap-2 px-4 py-2 rounded-lg font-medium bg-orange-50 text-orange-600"
              >
                <MessageOutlined />
                <span>H·ªèi ƒë√°p AI</span>
              </button>
              <button
                onClick={() => navigate("/handbook")}
                className="flex items-center gap-2 px-4 py-2 rounded-lg font-medium text-gray-700 hover:bg-gray-50 transition"
              >
                <BookOutlined />
                <span>S·ªï tay</span>
              </button>
              <button
                onClick={() => navigate("/clubs")}
                className="flex items-center gap-2 px-4 py-2 rounded-lg font-medium text-gray-700 hover:bg-gray-50 transition"
              >
                <TeamOutlined />
                <span>C√¢u l·∫°c b·ªô</span>
              </button>
              <button
                onClick={() => navigate("/student/notifications")}
                className="flex items-center gap-2 px-4 py-2 rounded-lg font-medium text-gray-700 hover:bg-gray-50 transition"
              >
                <BellOutlined />
                <span>Th√¥ng b√°o</span>
              </button>

              {/* Divider */}
              <div className="w-px h-8 bg-gray-200 mx-2"></div>

              {/* User Dropdown */}
              <Dropdown menu={{ items: userMenuItems }} placement="bottomRight">
                <button className="flex items-center gap-3 hover:bg-gray-50 rounded-lg p-2 transition">
                  <Avatar
                    src={
                      user.avatarUrl ||
                      `https://ui-avatars.com/api/?name=${encodeURIComponent(
                        user.fullName
                      )}&background=f97316&color=fff`
                    }
                    alt={user.fullName}
                    size={36}
                  />
                  <div className="text-left">
                    <p className="text-sm font-semibold text-gray-900">
                      {user.fullName}
                    </p>
                    <p className="text-xs text-gray-500">{user.studentId}</p>
                  </div>
                </button>
              </Dropdown>
            </div>
          </div>
        </div>
      </header>

      {/* Chat Container - FULL HEIGHT */}
      <div className="flex-1 flex flex-col max-w-4xl mx-auto w-full overflow-hidden">
        {/* Welcome Screen */}
        {messages.length === 0 && (
          <div className="flex-1 flex items-center justify-center p-8">
            <div className="text-center max-w-2xl">
              <div className="mb-8">
                <Avatar
                  size={100}
                  icon={<RobotOutlined />}
                  style={{
                    background: "linear-gradient(135deg, #f97316, #ea580c)",
                  }}
                  className="mx-auto shadow-lg"
                />
              </div>
              <h1 className="text-3xl font-bold text-gray-900 mb-3">
                Tr·ª£ l√Ω AI - FPTU Handbook
              </h1>
              <p className="text-gray-600 mb-8">
                Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI. H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ FPTU.
              </p>

              {/* Suggested Questions */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {suggestedQuestions.map((q, index) => (
                  <button
                    key={index}
                    onClick={() => handleSuggestedQuestion(q)}
                    className="text-left p-4 bg-white rounded-xl border border-gray-200 hover:border-orange-500 hover:shadow-md transition text-sm text-gray-700 hover:text-orange-600"
                  >
                    <MessageOutlined className="mr-2 text-orange-500" />
                    {q}
                  </button>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Messages Area */}
        {messages.length > 0 && (
          <div className="flex-1 overflow-y-auto p-6 space-y-4">
            {messages.map((msg) => (
              <div
                key={msg.id}
                className={`flex gap-3 ${
                  msg.type === "user" ? "justify-end" : "justify-start"
                }`}
              >
                {/* Bot Avatar */}
                {msg.type === "bot" && (
                  <Avatar
                    size={36}
                    icon={<RobotOutlined />}
                    style={{
                      background: "linear-gradient(135deg, #f97316, #ea580c)",
                      flexShrink: 0,
                    }}
                  />
                )}

                {/* Message Bubble */}
                <div
                  className={`max-w-[70%] rounded-2xl px-4 py-3 ${
                    msg.type === "user"
                      ? "bg-gradient-to-r from-orange-500 to-orange-600 text-white"
                      : "bg-white border border-gray-200 text-gray-900"
                  }`}
                  style={{
                    boxShadow:
                      msg.type === "user"
                        ? "0 2px 8px rgba(249, 115, 22, 0.3)"
                        : "0 1px 3px rgba(0, 0, 0, 0.1)",
                  }}
                >
                  {/* Message Text */}
                  <div className="text-sm leading-relaxed whitespace-pre-wrap">
                    {msg.content}
                  </div>

                  {/* Sources (Bot only) */}
                  {msg.type === "bot" && msg.sources && (
                    <div className="mt-3 pt-3 border-t border-gray-100">
                      <div className="flex items-center gap-2 mb-2">
                        <BookOutlined className="text-orange-500 text-xs" />
                        <span className="text-xs font-semibold text-gray-700">
                          Ngu·ªìn tham kh·∫£o:
                        </span>
                      </div>
                      <div className="flex flex-wrap gap-1">
                        {msg.sources.map((source, i) => (
                          <Tag key={i} color="orange" className="text-xs">
                            {source}
                          </Tag>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Feedback (Bot only) */}
                  {msg.type === "bot" && (
                    <div className="mt-3 pt-3 border-t border-gray-100">
                      {feedbackMessageId === msg.id ? (
                        <div className="space-y-2">
                          <span className="text-xs font-semibold text-gray-700">
                            Vui l√≤ng cho bi·∫øt v·∫•n ƒë·ªÅ:
                          </span>
                          <Input.TextArea
                            rows={2}
                            value={feedbackText}
                            onChange={(e) => setFeedbackText(e.target.value)}
                            placeholder="Nh·∫≠p ph·∫£n h·ªìi..."
                            className="text-xs"
                          />
                          <Space size="small">
                            <Button
                              type="primary"
                              size="small"
                              onClick={handleFeedbackSubmit}
                              style={{
                                background:
                                  "linear-gradient(135deg, #f97316, #ea580c)",
                                border: "none",
                              }}
                            >
                              G·ª≠i
                            </Button>
                            <Button
                              size="small"
                              onClick={() => setFeedbackMessageId(null)}
                            >
                              H·ªßy
                            </Button>
                          </Space>
                        </div>
                      ) : (
                        <div className="flex items-center gap-2">
                          <span className="text-xs text-gray-500">
                            H·ªØu √≠ch?
                          </span>
                          <Button
                            type="text"
                            size="small"
                            icon={<LikeOutlined />}
                            onClick={() => handleFeedback(msg.id, "positive")}
                            className="text-green-600 hover:text-green-700"
                          />
                          <Button
                            type="text"
                            size="small"
                            icon={<DislikeOutlined />}
                            onClick={() => setFeedbackMessageId(msg.id)}
                            className="text-red-600 hover:text-red-700"
                          />
                        </div>
                      )}
                    </div>
                  )}
                </div>

                {/* User Avatar */}
                {msg.type === "user" && (
                  <Avatar
                    size={40}
                    icon={<UserOutlined />}
                    style={{
                      background: "linear-gradient(135deg, #6b7280, #374151)",
                      flexShrink: 0,
                    }}
                  />
                )}
              </div>
            ))}

            {/* Typing Indicator */}
            {isTyping && (
              <div className="flex gap-3 justify-start">
                <Avatar
                  size={36}
                  icon={<RobotOutlined />}
                  style={{
                    background: "linear-gradient(135deg, #f97316, #ea580c)",
                    flexShrink: 0,
                  }}
                />
                <div className="bg-white border border-gray-200 rounded-2xl px-4 py-3 shadow-sm">
                  <Space size="small">
                    <Spin size="small" />
                    <span className="text-sm text-gray-600">
                      ƒêang tr·∫£ l·ªùi...
                    </span>
                  </Space>
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>
        )}

        {/* Input Box - Fixed at bottom */}
        <div className="border-t border-gray-200 bg-white p-4">
          <form onSubmit={handleSubmit} className="flex gap-3">
            <Input
              size="large"
              placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
              value={question}
              onChange={(e) => setQuestion(e.target.value)}
              disabled={isTyping}
              className="flex-1"
              style={{ borderRadius: "12px" }}
            />
            <Button
              type="primary"
              size="large"
              htmlType="submit"
              icon={<SendOutlined />}
              loading={isTyping}
              disabled={!question.trim()}
              style={{
                background: "linear-gradient(135deg, #f97316, #ea580c)",
                border: "none",
                borderRadius: "12px",
                minWidth: "100px",
              }}
            >
              G·ª≠i
            </Button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default QA;
