import React, { useState } from "react";
import {
  Search,
  Users,
  Calendar,
  MapPin,
  Mail,
  X,
  Sparkles,
  Trophy,
  Palette,
  Code,
  Music,
  Heart,
  BookOpen,
} from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";

interface Club {
  id: number;
  name: string;
  category: string;
  members: number;
  description: string;
  meeting: string;
  location: string;
  contact: string;
  image: string;
  tags: string[];
  president: string;
  achievements?: string[];
}

const Clubs: React.FC = () => {
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("T·∫•t c·∫£");
  const [selectedClub, setSelectedClub] = useState<Club | null>(null);

  const categories = [
    { name: "T·∫•t c·∫£", icon: Sparkles, color: "orange" },
    { name: "Th·ªÉ thao", icon: Trophy, color: "blue" },
    { name: "Ngh·ªá thu·∫≠t", icon: Palette, color: "purple" },
    { name: "C√¥ng ngh·ªá", icon: Code, color: "green" },
    { name: "√Çm nh·∫°c", icon: Music, color: "pink" },
    { name: "T√¨nh nguy·ªán", icon: Heart, color: "red" },
  ];

  const clubsData: Club[] = [
    {
      id: 1,
      name: "FCode - Coding Club",
      category: "C√¥ng ngh·ªá",
      members: 250,
      description:
        "CLB l·∫≠p tr√¨nh l·ªõn nh·∫•t FPTU, t·ªï ch·ª©c workshop, hackathon, v√† c√°c d·ª± √°n th·ª±c t·∫ø. N∆°i ƒë√†o t·∫°o v√† ph√°t tri·ªÉn k·ªπ nƒÉng l·∫≠p tr√¨nh chuy√™n nghi·ªáp.",
      meeting: "Th·ª© 3, 17:00 - 19:00",
      location: "Ph√≤ng Lab A201",
      contact: "fcode@fpt.edu.vn",
      image: "/images/Modern_facilities.jpeg",
      tags: ["L·∫≠p tr√¨nh", "AI", "Web Dev", "Mobile"],
      president: "Nguy·ªÖn VƒÉn A",
      achievements: [
        "üèÜ V√¥ ƒë·ªãch Hackathon FPTU 2023",
        "üéØ 30+ d·ª± √°n th·ª±c t·∫ø ƒë√£ tri·ªÉn khai",
        "üí° 5 startup th√†nh c√¥ng t·ª´ th√†nh vi√™n CLB",
      ],
    },
    {
      id: 2,
      name: "FPTU FC - C√¢u l·∫°c b·ªô B√≥ng ƒë√°",
      category: "Th·ªÉ thao",
      members: 180,
      description:
        "C√¢u l·∫°c b·ªô b√≥ng ƒë√° chuy√™n nghi·ªáp v·ªõi ƒë·ªôi h√¨nh ƒëa d·∫°ng. Tham gia gi·∫£i ƒë·∫•u li√™n tr∆∞·ªùng, giao l∆∞u v·ªõi c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc kh√°c.",
      meeting: "Th·ª© 2, 4, 6 - 17:00 - 19:00",
      location: "S√¢n b√≥ng FPTU",
      contact: "fptufc@fpt.edu.vn",
      image: "/images/Modern_facilities.jpeg",
      tags: ["B√≥ng ƒë√°", "Th·ªÉ thao", "Team building"],
      president: "Tr·∫ßn VƒÉn B",
      achievements: [
        "‚öΩ √Å qu√¢n gi·∫£i b√≥ng ƒë√° sinh vi√™n TP.HCM 2023",
        "üèÖ Top 4 gi·∫£i ƒë·∫•u li√™n tr∆∞·ªùng khu v·ª±c ƒê√¥ng Nam B·ªô",
        "üë• 120+ tr·∫≠n giao h·ªØu v·ªõi c√°c tr∆∞·ªùng",
      ],
    },
    {
      id: 3,
      name: "FMusic - C√¢u l·∫°c b·ªô √Çm nh·∫°c",
      category: "√Çm nh·∫°c",
      members: 95,
      description:
        "N∆°i h·ªôi t·ª• nh·ªØng t√†i nƒÉng √¢m nh·∫°c, t·ªï ch·ª©c minishow, liveshow, v√† c√°c ho·∫°t ƒë·ªông √¢m nh·∫°c. ƒê√†o t·∫°o thanh nh·∫°c, nh·∫°c c·ª•, v√† s·∫£n xu·∫•t √¢m nh·∫°c.",
      meeting: "Th·ª© 5, 18:00 - 20:00",
      location: "Ph√≤ng Band 301",
      contact: "fmusic@fpt.edu.vn",
      image: "/images/Modern_facilities.jpeg",
      tags: ["√Çm nh·∫°c", "Band", "Vocal", "Producer"],
      president: "L√™ Th·ªã C",
      achievements: [
        "üéµ 10+ MV ca nh·∫°c ch·∫•t l∆∞·ª£ng",
        "üé§ T·ªï ch·ª©c 5 concert l·ªõn m·ªói nƒÉm",
        "üé∏ H·ª£p t√°c v·ªõi c√°c ngh·ªá sƒ© chuy√™n nghi·ªáp",
      ],
    },
    {
      id: 4,
      name: "FPhoto - C√¢u l·∫°c b·ªô Nhi·∫øp ·∫£nh",
      category: "Ngh·ªá thu·∫≠t",
      members: 120,
      description:
        "CLB nhi·∫øp ·∫£nh v√† quay phim chuy√™n nghi·ªáp. ƒê√†o t·∫°o k·ªπ nƒÉng ch·ª•p ·∫£nh, ch·ªânh s·ª≠a, v√† s·∫£n xu·∫•t n·ªôi dung visual cho c√°c s·ª± ki·ªán tr∆∞·ªùng.",
      meeting: "Th·ª© 7, 14:00 - 16:00",
      location: "Studio A102",
      contact: "fphoto@fpt.edu.vn",
      image: "/images/Modern_facilities.jpeg",
      tags: ["Nhi·∫øp ·∫£nh", "Photoshop", "Videography"],
      president: "Ph·∫°m VƒÉn D",
      achievements: [
        "üì∏ 1000+ ·∫£nh ch·∫•t l∆∞·ª£ng cho s·ª± ki·ªán tr∆∞·ªùng",
        "üé¨ 20+ video viral tr√™n m·∫°ng x√£ h·ªôi",
        "üèÜ Gi·∫£i nh·∫•t cu·ªôc thi nhi·∫øp ·∫£nh sinh vi√™n to√†n qu·ªëc",
      ],
    },
    {
      id: 5,
      name: "Green FPTU - CLB T√¨nh nguy·ªán",
      category: "T√¨nh nguy·ªán",
      members: 200,
      description:
        "C√¢u l·∫°c b·ªô t√¨nh nguy·ªán l·ªõn nh·∫•t FPTU, t·ªï ch·ª©c c√°c ho·∫°t ƒë·ªông t·ª´ thi·ªán, b·∫£o v·ªá m√¥i tr∆∞·ªùng, v√† h·ªó tr·ª£ c·ªông ƒë·ªìng.",
      meeting: "Ch·ªß nh·∫≠t, 08:00 - 10:00",
      location: "H·ªôi tr∆∞·ªùng B",
      contact: "greenfptu@fpt.edu.vn",
      image: "/images/Modern_facilities.jpeg",
      tags: ["T√¨nh nguy·ªán", "M√¥i tr∆∞·ªùng", "T·ª´ thi·ªán"],
      president: "Ho√†ng Th·ªã E",
      achievements: [
        "‚ù§Ô∏è 50+ chuy·∫øn t·ª´ thi·ªán m·ªói nƒÉm",
        "üå± Tr·ªìng 10,000+ c√¢y xanh",
        "üéÅ H·ªó tr·ª£ 100+ gia ƒë√¨nh kh√≥ khƒÉn",
      ],
    },
    {
      id: 6,
      name: "FPTU Dance Crew",
      category: "Ngh·ªá thu·∫≠t",
      members: 75,
      description:
        "ƒê·ªôi nh·∫£y chuy√™n nghi·ªáp c·ªßa FPTU, bi·ªÉu di·ªÖn t·∫°i c√°c s·ª± ki·ªán l·ªõn, tham gia c√°c cu·ªôc thi nh·∫£y to√†n qu·ªëc. ƒê√†o t·∫°o c√°c th·ªÉ lo·∫°i t·ª´ Urban ƒë·∫øn K-pop.",
      meeting: "Th·ª© 3, 6 - 19:00 - 21:00",
      location: "Ph√≤ng Dance 402",
      contact: "fptudance@fpt.edu.vn",
      image: "/images/Modern_facilities.jpeg",
      tags: ["Dance", "Performance", "K-pop", "Urban"],
      president: "ƒê·ªó VƒÉn F",
      achievements: [
        "üíÉ Top 3 cu·ªôc thi nh·∫£y to√†n qu·ªëc",
        "üé≠ Bi·ªÉu di·ªÖn t·∫°i 20+ s·ª± ki·ªán l·ªõn",
        "üì∫ 5M+ views c√°c video performance",
      ],
    },
  ];

  const getCategoryIcon = (category: string) => {
    const cat = categories.find((c) => c.name === category);
    if (!cat) return Code;
    return cat.icon;
  };

  const filteredClubs = clubsData.filter((club) => {
    const matchesSearch =
      club.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      club.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
      club.tags.some((tag) =>
        tag.toLowerCase().includes(searchQuery.toLowerCase())
      );
    const matchesCategory =
      selectedCategory === "T·∫•t c·∫£" || club.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  return (
    <div className="min-h-screen bg-background p-6">
      <div className="max-w-screen-2xl mx-auto space-y-8">
        {/* Header */}
        <div className="text-center space-y-4">
          <h1 className="text-4xl font-bold text-foreground">
            C√¢u l·∫°c b·ªô sinh vi√™n
          </h1>
          <p className="text-xl text-muted-foreground">
            Kh√°m ph√° v√† tham gia c√°c CLB ph√π h·ª£p v·ªõi ƒëam m√™ c·ªßa b·∫°n
          </p>
        </div>
        {/* Search and Filter */}
        <Card>
          <CardContent className="p-6">
            <div className="relative mb-6">
              <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5" />
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="T√¨m ki·∫øm c√¢u l·∫°c b·ªô theo t√™n, m√¥ t·∫£, ho·∫∑c tag..."
                className="w-full pl-12 pr-4 py-4 border-2 border-border rounded-2xl focus:outline-none focus:border-orange-500 transition-all bg-background"
              />
            </div>

            {/* Categories Filter */}
            <div className="flex flex-wrap gap-3">
              {categories.map((cat) => {
                const Icon = cat.icon;
                const isActive = selectedCategory === cat.name;
                return (
                  <button
                    key={cat.name}
                    onClick={() => setSelectedCategory(cat.name)}
                    className={`flex items-center gap-2 px-4 py-2 rounded-xl font-medium transition-all ${
                      isActive
                        ? "bg-orange-500 text-white shadow-lg scale-105"
                        : "bg-background text-foreground hover:bg-muted border-2 border-border"
                    }`}
                  >
                    <Icon className="w-4 h-4" />
                    <span>{cat.name}</span>
                    {cat.name === "T·∫•t c·∫£" && (
                      <span className="ml-1 text-xs opacity-75">
                        ({clubsData.length})
                      </span>
                    )}
                  </button>
                );
              })}
            </div>
          </CardContent>
        </Card>

        {/* Clubs Grid */}
        {filteredClubs.length === 0 ? (
          <Card>
            <CardContent className="text-center py-16">
              <div className="w-20 h-20 bg-orange-100 rounded-2xl flex items-center justify-center mx-auto mb-6">
                <Search className="w-10 h-10 text-orange-500" />
              </div>
              <h3 className="text-2xl font-bold text-foreground mb-2">
                Kh√¥ng t√¨m th·∫•y c√¢u l·∫°c b·ªô n√†o
              </h3>
              <p className="text-muted-foreground">
                Th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c ch·ªçn danh m·ª•c kh√°c
              </p>
            </CardContent>
          </Card>
        ) : (
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredClubs.map((club) => {
              const CategoryIcon = getCategoryIcon(club.category);

              return (
                <Card
                  key={club.id}
                  className="overflow-hidden hover:shadow-lg transition-all cursor-pointer hover:-translate-y-1"
                  onClick={() => setSelectedClub(club)}
                >
                  {/* Image */}
                  <div className="relative h-48 overflow-hidden">
                    <img
                      src={club.image}
                      alt={club.name}
                      className="w-full h-full object-cover transition-transform duration-500 hover:scale-110"
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent"></div>
                    <div className="absolute top-4 right-4 bg-white/90 backdrop-blur-sm px-3 py-1 rounded-full flex items-center gap-1">
                      <Users className="w-4 h-4 text-orange-500" />
                      <span className="text-sm font-semibold text-foreground">
                        {club.members}
                      </span>
                    </div>
                    <div className="absolute bottom-4 left-4">
                      <span className="bg-orange-500 text-white px-3 py-1 rounded-full text-sm font-medium flex items-center gap-1">
                        <CategoryIcon className="w-4 h-4" />
                        {club.category}
                      </span>
                    </div>
                  </div>

                  {/* Content */}
                  <CardContent className="p-6">
                    <h3 className="text-xl font-bold text-foreground mb-2 line-clamp-1">
                      {club.name}
                    </h3>
                    <p className="text-sm text-muted-foreground mb-4 line-clamp-2">
                      {club.description}
                    </p>

                    {/* Tags */}
                    <div className="flex flex-wrap gap-2 mb-4">
                      {club.tags.slice(0, 3).map((tag, i) => (
                        <span
                          key={i}
                          className="px-2 py-1 bg-orange-50 text-orange-600 rounded-md text-xs font-medium"
                        >
                          #{tag}
                        </span>
                      ))}
                    </div>

                    {/* Footer */}
                    <div className="flex items-center justify-between pt-4 border-t border-border">
                      <div className="flex items-center gap-2 text-sm text-muted-foreground">
                        <Calendar className="w-4 h-4" />
                        <span>{club.meeting.split(",")[0]}</span>
                      </div>
                      <button className="text-orange-500 hover:text-orange-600 font-semibold text-sm flex items-center gap-1">
                        Chi ti·∫øt
                        <svg
                          className="w-4 h-4"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M9 5l7 7-7 7"
                          />
                        </svg>
                      </button>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        )}
      </div>

      {/* Club Detail Modal */}
      {selectedClub && (
        <div
          className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 px-4 backdrop-blur-sm"
          onClick={() => setSelectedClub(null)}
        >
          <div
            className="bg-white rounded-3xl shadow-2xl max-w-3xl w-full max-h-[90vh] overflow-y-auto animate-slideInUp"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Close Button */}
            <button
              onClick={() => setSelectedClub(null)}
              className="absolute top-4 right-4 w-10 h-10 bg-white rounded-full flex items-center justify-center text-gray-600 hover:text-gray-900 hover:bg-gray-100 transition-all shadow-lg z-10"
            >
              <X className="w-5 h-5" />
            </button>

            {/* Image Header */}
            <div className="relative h-64 overflow-hidden rounded-t-3xl">
              <img
                src={selectedClub.image}
                alt={selectedClub.name}
                className="w-full h-full object-cover"
              />
              <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent"></div>
              <div className="absolute bottom-6 left-6 right-6">
                <div className="flex items-center gap-3 mb-3">
                  {React.createElement(getCategoryIcon(selectedClub.category), {
                    className: "w-8 h-8 text-white",
                  })}
                  <span className="bg-white/20 backdrop-blur-sm text-white px-3 py-1 rounded-full text-sm">
                    {selectedClub.category}
                  </span>
                </div>
                <h2 className="text-3xl font-bold text-white mb-2">
                  {selectedClub.name}
                </h2>
                <p className="text-orange-200 flex items-center gap-2">
                  <Users className="w-4 h-4" />
                  {selectedClub.members} th√†nh vi√™n
                </p>
              </div>
            </div>

            {/* Content */}
            <div className="p-8">
              {/* Description */}
              <div className="mb-6">
                <h3 className="text-lg font-bold text-gray-900 mb-3 flex items-center gap-2">
                  <BookOpen className="w-5 h-5 text-orange-500" />
                  Gi·ªõi thi·ªáu
                </h3>
                <p className="text-gray-700 leading-relaxed">
                  {selectedClub.description}
                </p>
              </div>

              {/* Achievements */}
              {selectedClub.achievements && (
                <div className="mb-6">
                  <h3 className="text-lg font-bold text-gray-900 mb-3 flex items-center gap-2">
                    <Trophy className="w-5 h-5 text-orange-500" />
                    Th√†nh t√≠ch n·ªïi b·∫≠t
                  </h3>
                  <ul className="space-y-2">
                    {selectedClub.achievements.map((achievement, i) => (
                      <li
                        key={i}
                        className="text-gray-700 pl-6 relative before:content-[''] before:absolute before:left-0 before:top-2 before:w-2 before:h-2 before:bg-orange-500 before:rounded-full"
                      >
                        {achievement}
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {/* Info Grid */}
              <div className="grid md:grid-cols-2 gap-4 mb-6">
                <div className="bg-orange-50 p-4 rounded-xl">
                  <div className="flex items-center gap-2 text-orange-600 mb-2">
                    <Calendar className="w-5 h-5" />
                    <span className="font-semibold">L·ªãch h·ªçp</span>
                  </div>
                  <p className="text-gray-700">{selectedClub.meeting}</p>
                </div>
                <div className="bg-blue-50 p-4 rounded-xl">
                  <div className="flex items-center gap-2 text-blue-600 mb-2">
                    <MapPin className="w-5 h-5" />
                    <span className="font-semibold">ƒê·ªãa ƒëi·ªÉm</span>
                  </div>
                  <p className="text-gray-700">{selectedClub.location}</p>
                </div>
                <div className="bg-purple-50 p-4 rounded-xl">
                  <div className="flex items-center gap-2 text-purple-600 mb-2">
                    <Users className="w-5 h-5" />
                    <span className="font-semibold">Ch·ªß nhi·ªám</span>
                  </div>
                  <p className="text-gray-700">{selectedClub.president}</p>
                </div>
                <div className="bg-green-50 p-4 rounded-xl">
                  <div className="flex items-center gap-2 text-green-600 mb-2">
                    <Mail className="w-5 h-5" />
                    <span className="font-semibold">Li√™n h·ªá</span>
                  </div>
                  <p className="text-gray-700">{selectedClub.contact}</p>
                </div>
              </div>

              {/* Tags */}
              <div className="mb-6">
                <h3 className="text-sm font-semibold text-gray-700 mb-3">
                  Tags:
                </h3>
                <div className="flex flex-wrap gap-2">
                  {selectedClub.tags.map((tag, i) => (
                    <span
                      key={i}
                      className="px-3 py-1 bg-orange-100 text-orange-600 rounded-full text-sm font-medium"
                    >
                      #{tag}
                    </span>
                  ))}
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex gap-4">
                <button className="flex-1 bg-orange-500 text-white px-6 py-3 rounded-xl hover:bg-orange-600 transition font-semibold shadow-lg hover:shadow-xl">
                  ƒêƒÉng k√Ω tham gia
                </button>
                <button className="px-6 py-3 border-2 border-orange-500 text-orange-500 rounded-xl hover:bg-orange-50 transition font-semibold">
                  T√¨m hi·ªÉu th√™m
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Clubs;
